import React, { use, useEffect, useMemo, useState } from "react";
import Head from "next/head";
import { AppProvider, BlockStack } from "@shopify/polaris";
import en from "@shopify/polaris/locales/en.json";
import { ProductsTable } from "../components/ProductsTable";
import {
  Category,
  OrderWithPrice,
  Product,
  SelectedStaff,
  Staff,
} from "../models/model";
import { GetStaticProps, NextPage } from "next/types";

import styles from "./index.module.css";
import { SelectStaffForm } from "../components/SelectStaffForm";
import { ResultsTable } from "../components/ResultsTable";
import {
  fetchCategories,
  fetchOrders,
  fetchProducts,
  fetchStaff,
} from "./api/api";
import { calculateCommission } from "../utils.ts/utils";

interface Props {
  products: Product[];
  staff: Staff[];
  categories: Category[];
}

const Home: NextPage<Props> = ({ products, staff, categories }) => {
  const [selectedProducts, setSelectedProducts] = useState<Array<string>>([]);
  const [orders, setOrders] = useState<OrderWithPrice[]>([]);
  const [selectedStaff, setSelectedStaff] = useState<SelectedStaff>(null);
  const [comissionValue, setComissionValue] = useState("1");

  const getOrders = async (selectedStaff: SelectedStaff) => {
    try {
      const fetchedOrders = await fetchOrders(
        selectedStaff.staffId.toString(),
        selectedStaff.start,
        selectedStaff.end
      );
      setOrders(fetchedOrders);
    } catch (error) {
      console.error("Error fetching orders:", error);
    }
  };

  const { ordersWithComissions, totalCommissionSum, totalOrders } =
    useMemo(() => {
      return calculateCommission(
        orders,
        selectedProducts,
        comissionValue,
        selectedStaff?.staffId
      );
    }, [
      products,
      selectedProducts,
      comissionValue,
      selectedStaff?.staffId,
      selectedStaff?.start,
      selectedStaff?.end,
    ]);

  return (
    <AppProvider i18n={en}>
      <div>
        <Head>
          <title>Create Next App</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <main className={styles.main}>
          <BlockStack gap="500">
            <ProductsTable
              initialProducts={products}
              setSelectedProducts={setSelectedProducts}
              setComissionValue={setComissionValue}
              comissionValue={comissionValue}
              categories={categories}
            />
            <SelectStaffForm
              staff={staff}
              setStaff={setSelectedStaff}
              getOrders={getOrders}
              selectedProducts={selectedProducts}
            />

            {selectedProducts.length && selectedStaff?.staffId ? (
              <ResultsTable
                orders={ordersWithComissions}
                totalCommissionSum={totalCommissionSum}
                totalOrders={totalOrders}
              />
            ) : null}
          </BlockStack>
        </main>
      </div>
    </AppProvider>
  );
};

export default Home;

export const getStaticProps: GetStaticProps<Props> = async () => {
  try {
    const products = await fetchProducts();
    const staff = await fetchStaff();
    const categories = await fetchCategories();
    return {
      props: {
        products,
        staff,
        categories,
      },
    };
  } catch (error) {
    console.error("Error fetching products:", error);
    return {
      props: {
        products: [],
        staff: [],
        categories: [],
      },
    };
  }
};
